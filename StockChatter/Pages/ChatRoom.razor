@page "/chatRoom"

@using Microsoft.AspNetCore.SignalR.Client
@using StockChatter.HubClients
@using StockChatter.Shared.HubContracts.ChatRoom

@inject ChatRoomHubClient ChatHub

@implements IAsyncDisposable

<PageTitle>Chat Room</PageTitle>

<div class="d-flex flex-column mx-auto w-50 h-100 shadow">
    <div id="messages" class="d-flex flex-column-reverse mb-3 px-3 pt-3 overflow-auto" style="height: 100%">
        @if (_messages.Any())
        {
            var orderedMessages = _messages.OrderByDescending(m => m.PostedAt).ToList();

            @for (var i = 0; i < _messages.Count && i < 50; i++)
            {
                var message = _messages[(_messages.Count - 1) - i];

                <div class="w-100">
                    <div id="@Guid.NewGuid()" class="card mb-3 @(message.Sender == _userName ? "float-end" : "float-start")"
                 style="width: fit-content; max-width: 75%; height: fit-content; background-color: #E1F5FE">
                        <div class="card-header"><strong>@message.Sender</strong></div>
                        <div class="card-body">
                            <p class="card-text">@message.Content</p>
                        </div>
                        <footer class="px-3 pb-1" style="text-align: end; font-size: 13px">
                            <i>
                                @if (@message.PostedAt.Date == DateTime.Today.Date)
                                {
                                    @message.PostedAt.ToString("t")
                                }
                                else
                                {
                                    @message.PostedAt.ToString("g")
                                }
                            </i>
                        </footer>
                    </div>
                </div>
            }
        }
    </div>

    @*Sender #42A5F5 Receiver #E1F5FE*@
    <div id="message-input" class="mt-auto text-center pb-2">
        @if (_messages.Any() == false)
        {
            <div class="mb-3">
                Start chatting!
            </div>
        }

        <div class="d-flex end-0">
            <input @onkeydown="@(async k => { if(k.Code == "Enter") await Send(); })" @bind="MessageInput" @oninput="OnType" class="m-2 form-control" type="text" placeholder="Type your message..." />
            <button class="my-2 me-2 btn btn-primary" disabled="@(SendEnabled)" type="submit" @onclick="Send">Send</button>
        </div>
    </div>
</div>

@code {
    private List<PostedMessageModel> _messages = new List<PostedMessageModel>();
    private string? _messageInput;
    private string? _userName;

    private string MessageInput
    {
        get => _messageInput ?? "";
        set
        {
            _messageInput = value;
            StateHasChanged();
        }
    }

    private bool SendEnabled =>
        !(IsConnected && !string.IsNullOrWhiteSpace(_messageInput) && !string.IsNullOrWhiteSpace(_userName));

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public bool IsConnected => ChatHub.ConnectionState == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
            _userName = (await authenticationStateTask).User.GetNameFromClaimsPrincipal();

        ChatHub.OnMessageReceived += AddMessage;

        await ChatHub.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        ChatHub.OnMessageReceived -= AddMessage;
        await ChatHub.StopAsync();
    }

    private async Task Send()
    {
        if (MessageInput == "") return;

        await ChatHub.SendMessage(new PostMessageModel
            {
                Sender = _userName,
                Text = _messageInput,
            });

        _messageInput = "";
        StateHasChanged();
    }

    private void AddMessage(PostedMessageModel message)
    {
        _messages.Add(message);
        StateHasChanged();
    }

    private void OnType(ChangeEventArgs c) => MessageInput = c.Value?.ToString() ?? string.Empty;
}