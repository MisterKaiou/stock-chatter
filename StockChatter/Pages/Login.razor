@using Functional.Result
@using StockChatter.Shared.Models.Auth

@page "/login"
@attribute [AllowAnonymous]
@inject NavigationManager NavManager
@inject IAuthService AuthService
@inject IJwtStateProviderService AuthStateProvider

<PageTitle>StockChatter - Login</PageTitle>

<EditForm Model="@_loginModel" OnValidSubmit="@SubmitLoginRequest" class="container col-md-12">
    <DataAnnotationsValidator />
    <div>
        <h2 class="mb-3">Login</h2>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <div>
                <InputText id="email" type="email" class="form-control" @bind-Value="_loginModel.Email" placeholder="your@email.com" />
                <ValidationMessage For="@(() => _loginModel.Email)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <div>
                <InputText id="password" type="password" class="form-control" @bind-Value="_loginModel.Password" placeholder="Your password" />
                <ValidationMessage For="@(() => _loginModel.Password)" />
            </div>
        </div>

        @if (_requestErrors != null)
        {
            <div class="card border-danger mb-3" style="background-color:#F5C6CB;">
                <div class="card-header">Error</div>
                <div class="card-body">
                    @foreach (var error in _requestErrors)
                    {
                        <p class="card-text">@error</p>
                    }
                </div>
            </div>
        }

        <button class="btn btn-primary" type="submit">Submit</button>
        <button class="btn btn-outline-secondary float-end" @onclick="@MoveToRegistrationPage">Create Account</button>
    </div>
</EditForm>

@code {
    private LoginRequest _loginModel = new();
    private Errors? _requestErrors = null;

    private async Task SubmitLoginRequest()
    {
        try
        {
            if (_requestErrors != null)
            {
                _requestErrors = null;
                StateHasChanged();
            }

            await AuthService.LoginUserAsync(_loginModel)
                .Match(
                    async ok =>
                    {
                        await AuthStateProvider.NotifyUserAuthentication(ok);
                        NavManager.NavigateTo(Routes.CHAT_ROOM, true);
                    },
                    err =>
                    {
                        _requestErrors = err;
                        StateHasChanged();
                    }
                );
        }
        catch (Exception ex)
        {
            _requestErrors = new Errors();
            _requestErrors?.Add($"{ex.GetType().Name} - {ex.Message}");
            StateHasChanged();
        }
    }

    private void MoveToRegistrationPage() => NavManager.NavigateTo(Routes.REGISTRATION);
}